# Script to automate Checks for potential exploitation of ZeroLogon in the domain
# comments to yossis@protonmail.com
#
# This is a very quick and totally un-invested script that automates some of the leading artifects in determining an actual exploitation of CVE-2020-1472, compiled from multiple blogs, including https://medium.com/@Bandar./detecting-the-cve-2020-1472-zerologon-attacks-6f6ec0730a9e
# Ideally, the 2nd check (for events from Security & System event logs) can be done from a SIEM/Syslog/Event collector, which keeps events far enough back to detect such exploits.
# Note that if netlogon logs were not enabled in the environment, and DC logs were overwritten by newer events, an exploitation could have happened and would not be noticed by the remaining artifacts in the environment checked.
# Can also run this script to detect future exploitations, although other methods exist, from NEtwork/EPP etc (read more on netlogon debug before turning it On for a long period of time).
# Also Note that this script comes to find if a domain was potentially exploited by ZeroLogon. For a script to help in monitoring event IDs related to changes in Netlogon secure channel connections associated with CVE-2020-1472, see Microsoft's advice here - https://support.microsoft.com/en-us/help/4557233/script-to-help-in-monitoring-event-ids-related-to-changes-in-netlogon

$EAP = $ErrorActionPreference
$ErrorActionPreference = "silentlycontinue"

$DCs = Get-ADDomainController -Filter * | select hostname, operatingsystem
Write-Host "Enumerating Domain controllers for $env:USERDOMAIN ($env:USERDNSDOMAIN) domain.`n"

$NetLogonFiles = @();
$zlogonLogFile = 'ZeroLogonSuspiciousLogEntries.txt'

"$(get-date): ZeroLogon Check started from $($env:COMPUTERNAME) running as $($env:USERDOMAIN)\$($env:USERNAME)" | Out-File $zlogonLogFile -Append -Force
$DCs | Out-File $zlogonLogFile -Append -Force

$DCs.hostname | % {
        $DC =$_; 
        $NetLogonExist = dir "\\$DC\c$\windows\debug\netlogon.*" | select -ExpandProperty fullname; 
        if ($NetLogonExist) {
                "Found NetLogon Debug log(s) on Domain Controller $DC.";
                $NetLogonFiles += $NetLogonExist
            }
    }

$NetrServerAuthN = $NetLogonFiles | % {cat $_ | select-string NetrServerAuthenticate}
if ($NetrServerAuthN) {
        Write-Host "Found NetrServerAuthenticate events in NetLogon log(s). Can be False positive. Checking for Disable RPC Sign and Seal." -ForegroundColor Yellow
        $NetLogonSuspiciousEntries = $NetrServerAuthN | select-string 212fffff
        if ($NetLogonSuspiciousEntries) {
                Write-Warning "Found a potential Zerologon Attack. Check victim server and attacker IP."
                "Found a potential Zerologon attack. Check victim server and attacker IP." | Out-File $zlogonLogFile -Append -Force
                Write-Host $NetLogonSuspiciousEntries -ForegroundColor Yellow
                $NetLogonSuspiciousEntries | Out-File $zlogonLogFile -Force -Append
                "Results saved to $zlogonLogFile."
                #NOTE: Log entries will look like:
                # <TIMESTAMP> [SESSION] [<SESSION_ID>] <DOMAIN_NAME>: NetrServerAuthenticate entered: <VICTIM_SERVER_NAME> (<CLIENT_IP>) on account <VICTIM_SERVER_MACHINE_ACCOUNT>(Negot: 212fffff) 
                # Can invest further work in parsing the entries (TBD)
            }
    }
    else {
        Write-Host "NetLogon log(s) check yielded no suspicious results.`n" -ForegroundColor Cyan
        "NetLogon log(s) check yielded no suspicious results." | Out-File $zlogonLogFile -Append -Force
    }

# NOTE: checking Security logs from ALL DCs can take a considerable amount of time and resources from current process/host in large environments.
Write-Host "Moving on to EVTX Logs check.`n" -ForegroundColor Cyan

$SecurityEventsMXL = @'
<QueryList>
  <Query Id="0" Path="Security">
    <Select Path="Security">*[System[(EventID=4742)]]</Select>
  </Query>
</QueryList>
'@

$SystemEventsXML = @'
<QueryList>
  <Query Id="0" Path="System">
    <Select Path="System">*[System[(EventID=5805)]]</Select>
  </Query>
</QueryList>
'@

$DCSecEvents = @();
$DCSysEvents = @();

# Fetch events
[int]$i = 1;
$DCs.hostname | Foreach {
    $DC = $_;
    "fetching Security events from $_ ($i out of $($DCs.count))..."	
    "Oldest entry in SECURITY event log is $(Get-WinEvent -ComputerName $DC -LogName Security -MaxEvents 1 -Oldest | select -ExpandProperty TimeCreated)"
    $DCSecEvents += Get-WinEvent -FilterXml $SecurityEventsMXL -ComputerName $DC -ErrorAction SilentlyContinue
    $i++;
}

# validate data retrieved
"Total of $($DCSecEvents.count) Security events fetched.`n"

if (!($DCSecEvents)) {
        Write-Host "No relevant Security events found. exiting." -ForegroundColor Cyan
        break
    }

# Move on to get SYSTEM events, to correlate with potential 4742 events
[int]$i = 1;
$DCs.hostname | Foreach {
    $DC = $_;
    "fetching System events from $_ ($i out of $($DCs.count))..."
    "Oldest entry in SYSTEM event log is $(Get-WinEvent -ComputerName $DC -LogName System -MaxEvents 1 -Oldest | select -ExpandProperty TimeCreated)"
    $DCSysEvents += Get-WinEvent -FilterXml $SystemEventsXML -ComputerName $DC -ErrorAction SilentlyContinue
    $i++;
}

# validate data retrieved
"Total of $($DCsysEvents.count) SYSTEM events fetched.`n"

if (!($DCSysEvents)) {
        Write-Host "No relevant System events found. No date to correlate host password reset with failed NetLogon AuthN.`nExiting." -ForegroundColor Cyan
        break
    }

# if we have both 4742 (comp account pwd reset) AND 5805 NetLogon AuthN failed - Correlate by SAME DATE
# parse events
$DCSecEvents | foreach {                  
    # customize data & prepare object
    $eventXML = [xml]$_.ToXml()
    For ($i=0; $i -lt $eventXML.Event.EventData.Data.Count; $i++) {            
        # Append XML data as object properties
        Add-Member -InputObject $_ -MemberType NoteProperty -Force `
            -Name  $eventXML.Event.EventData.Data[$i].name `
            -Value $eventXML.Event.EventData.Data[$i].'#text'
        }   
}

Write-Host "Relevant Security events found." -ForegroundColor Cyan
$DCSecEvents | select subjectusername, subjectlogonId, targetusername, TimeCreated

$DCSysEvents | foreach {                  
    # customize data & prepare object
    $eventXML = [xml]$_.ToXml()
    For ($i=0; $i -lt $eventXML.Event.EventData.Data.Count; $i++) {            
        # Append XML data as object properties
        Add-Member -InputObject $_ -MemberType NoteProperty -Force `
            -Name  $eventXML.Event.EventData.Data[$i].name `
            -Value $eventXML.Event.EventData.Data[$i].'#text'
        }   
}

Write-Host "`nRelevant System events found." -ForegroundColor Cyan
#$DCSysEvents | select providerName, machineName, TimeCreated

# match events / correlate
$CorrelatedDateTime = compare ($DCSecEvents | select -ExpandProperty TimeCreated) ($DCSysEvents | select -ExpandProperty TimeCreated) -ExcludeDifferent -IncludeEqual | select -ExpandProperty InputObject

if ($CorrelatedDateTime) {
    Write-Host "`nZeroLogon attack potentially found on the following:" -ForegroundColor Red
    $CorrelatedDateTime | foreach {
            $datetime = $_; 
            $Results = $DCSecEvents | where TimeCreated -eq $datetime | Select-Object subjectusername, subjectlogonId, @{n='HostAttacked';e={$_.targetusername}},  @{n='AttackTime';e={$_.TimeCreated}}
            $Results
            $Results | Out-File $zlogonLogFile -Append -Force        
        }
    Write-Host "Results saved to $zlogonLogFile."
    }

    else 
        {
        Write-Host "No Correlated Results found. exiting." -ForegroundColor Green
        $DCSecEvents | select subjectusername, subjectlogonId, targetusername, TimeCreated | Out-File $zlogonLogFile -Append -Force
        $DCSysEvents | select providerName, machineName, TimeCreated | Out-File $zlogonLogFile -Append -Force
        Write-Host "Note: Query results saved to $zlogonLogFile for your inspection." -ForegroundColor Green
    }

$ErrorActionPreference = $EAP 